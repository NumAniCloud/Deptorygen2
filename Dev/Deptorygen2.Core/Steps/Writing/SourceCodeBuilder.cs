using System.Collections.Generic;
using System.Linq;
using Deptorygen2.Core.Steps.Creation.Abstraction;
using Deptorygen2.Core.Steps.Definitions;
using Deptorygen2.Core.Steps.Definitions.Methods;
using NacHelpers.Extensions;

namespace Deptorygen2.Core.Steps.Writing
{
	internal class SourceCodeBuilder
	{
		private readonly DefinitionRoot _definitionRoot;
		private readonly ICreationAggregator _creation;
		private readonly ResolverWriter _resolverWriter;

		public SourceCodeBuilder(SourceTreeDefinition definition)
		{
			_definitionRoot = definition.DefinitionRoot;
			_creation = definition.Creation;
			_resolverWriter = new ResolverWriter();
		}

		public SourceFile Write()
		{
			var fileName = _definitionRoot.Namespace.Class.Name + ".g";
			var contents = Render();
			return new SourceFile(fileName, contents);
		}

		private string Render()
		{
			var builder = CodeHelper.GetBuilder();

			builder.AppendLine("// <autogenerated />");
			builder.AppendLine("#nullable enable");

			foreach (var usingNode in _definitionRoot.Usings)
			{
				builder.AppendLine($"using {usingNode.Namespace};");
			}

			builder.AppendLine();

			builder.AppendLine($"namespace {_definitionRoot.Namespace.Name}");
			builder.EnterBlock(inner =>
			{
				RenderClass(_definitionRoot.Namespace.Class, inner);
			});

			return builder.GetText();
		}

		private void RenderClass(Class @class, ICodeBuilder builder)
		{
			builder.Append($"partial class {@class.Name}");

			builder.EnterBlock(block =>
			{
				block.EnterSequence(seqOuter =>
				{
					seqOuter.EnterChunk(chunk =>
					{
						foreach (var field in @class.Fields)
						{
							chunk.AppendLine($"private readonly {field.Type.Text} {field.Name};");
						}
					});

					foreach (var method in @class.Methods)
					{
						RenderMethod(method, seqOuter);
					}
				});
			});
		}



		private IEnumerable<string> GetInterfaces(Class @class)
		{
			if (@class.DisposableInfo.HasDisposable)
			{
				yield return "IDisposable";
			}

			if (@class.DisposableInfo.HasAsyncDisposable)
			{
				yield return "IAsyncDisposable";
			}
		}

		private void RenderMethod(MethodInfo method, ICodeBuilder builder)
		{
			builder.EnterChunk(chunk =>
			{
				foreach (var attribute in method.Attributes)
				{
					chunk.AppendLine(attribute.Text);
				}
				chunk.AppendLine(method.Signature.GetSignatureString());
				chunk.EnterBlock(block =>
				{
					method.Implementation.Render(block, _creation, _resolverWriter);
				});
			});
		}
	}
}
